// <auto-generated />
using System;
using DFN2023.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DFN2023.Infrastructure.Migrations.Sql
{
    [DbContext(typeof(SqlContext))]
    [Migration("20230420151445_20042023.5")]
    partial class _200420235
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DFN2023.Entities.EF.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.Property<string>("LastIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("RowNum")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Category", "dbo");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.CategoryProductBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("ProductBaseId")
                        .HasColumnType("int");

                    b.Property<int>("RowNum")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductBaseId");

                    b.ToTable("CategoryProductBase", "dbo");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RowNum")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City", "dbo");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdminNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("DetailDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MapAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MapCityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("MapCountryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("MapCountyId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<float?>("MapX")
                        .HasColumnType("real");

                    b.Property<float?>("MapY")
                        .HasColumnType("real");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficialAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OfficialCityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("OfficialCountryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("OfficialCountyId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("OfficialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaxNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxOffice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tiktok")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Whatsapp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("YearFounded")
                        .HasColumnType("int");

                    b.Property<string>("Youtube")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyTypeId");

                    b.HasIndex("MapCityId");

                    b.HasIndex("MapCountryId");

                    b.HasIndex("MapCountyId");

                    b.HasIndex("OfficialCityId");

                    b.HasIndex("OfficialCountryId");

                    b.HasIndex("OfficialCountyId");

                    b.ToTable("Company", "dbo");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.CompanyImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RowNum")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyImage", "dbo");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.CompanyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("RowNum")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyType", "dbo");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RowNum")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Country", "dbo");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.County", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RowNum")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("County", "dbo");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FromUser")
                        .HasColumnType("int");

                    b.Property<int?>("LastIP")
                        .HasColumnType("int");

                    b.Property<string>("MessageContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("ToUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Message", "dbo");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.ProductBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.Property<string>("LastIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RowNum")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductBase", "dbo");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.ProductCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("LastIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Price")
                        .HasColumnType("real");

                    b.Property<int>("ProductBaseId")
                        .HasColumnType("int");

                    b.Property<int>("RowNum")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductBaseId");

                    b.ToTable("ProductCompany", "dbo");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.Slider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Image1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.Property<string>("LastIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RowNum")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Target")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Slider", "dbo");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.StaticContentGrupPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FreeText1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GrupTempId")
                        .HasColumnType("int");

                    b.Property<string>("Html")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("int");

                    b.Property<string>("SeoDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Statu")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GrupTempId");

                    b.ToTable("StaticContentGrupPage", "dbo");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.StaticContentGrupTemp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StaticContentGrupTemp", "dbo");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.StaticContentPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Attachment1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attachment2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attachment3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FreeText1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GrupId")
                        .HasColumnType("int");

                    b.Property<string>("Html")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<string>("SeoDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Statu")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TempId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GrupId");

                    b.HasIndex("TempId");

                    b.ToTable("StaticContentPage", "dbo");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.StaticContentTemp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StaticContentTemp", "dbo");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CitizenID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EmailConfirmDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmailConfirmed")
                        .HasColumnType("int");

                    b.Property<int?>("GDPRConfirmDate")
                        .HasColumnType("int");

                    b.Property<int?>("GDPRConfirmed")
                        .HasColumnType("int");

                    b.Property<string>("LastIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User", "dbo");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.UserUrunler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("UserUrunler", "dbo");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.Category", b =>
                {
                    b.HasOne("DFN2023.Entities.EF.Category", "ParentCategory")
                        .WithMany("ChildCategory")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Category_Category");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.CategoryProductBase", b =>
                {
                    b.HasOne("DFN2023.Entities.EF.Category", "Category")
                        .WithMany("CategoryProductBase")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Category_CategoryProductBase");

                    b.HasOne("DFN2023.Entities.EF.ProductBase", "ProductBase")
                        .WithMany("CategoryProductBase")
                        .HasForeignKey("ProductBaseId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductBase_CategoryProductBase");

                    b.Navigation("Category");

                    b.Navigation("ProductBase");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.City", b =>
                {
                    b.HasOne("DFN2023.Entities.EF.Country", "Country")
                        .WithMany("City")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Country_City");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.Company", b =>
                {
                    b.HasOne("DFN2023.Entities.EF.CompanyType", "CompanyType")
                        .WithMany("Company")
                        .HasForeignKey("CompanyTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanyType_Company");

                    b.HasOne("DFN2023.Entities.EF.City", "MapCity")
                        .WithMany("MapCompany")
                        .HasForeignKey("MapCityId")
                        .IsRequired()
                        .HasConstraintName("FK_City_CompanyMap");

                    b.HasOne("DFN2023.Entities.EF.Country", "MapCountry")
                        .WithMany("MapCompany")
                        .HasForeignKey("MapCountryId")
                        .IsRequired()
                        .HasConstraintName("FK_Country_CompanyMap");

                    b.HasOne("DFN2023.Entities.EF.County", "MapCounty")
                        .WithMany("MapCompany")
                        .HasForeignKey("MapCountyId")
                        .IsRequired()
                        .HasConstraintName("FK_County_CompanyMap");

                    b.HasOne("DFN2023.Entities.EF.City", "OfficialCity")
                        .WithMany("OfficialCompany")
                        .HasForeignKey("OfficialCityId")
                        .IsRequired()
                        .HasConstraintName("FK_City_CompanyOfficial");

                    b.HasOne("DFN2023.Entities.EF.Country", "OfficialCountry")
                        .WithMany("OfficialCompany")
                        .HasForeignKey("OfficialCountryId")
                        .IsRequired()
                        .HasConstraintName("FK_Country_CompanyOfficial");

                    b.HasOne("DFN2023.Entities.EF.County", "OfficialCounty")
                        .WithMany("OfficialCompany")
                        .HasForeignKey("OfficialCountyId")
                        .IsRequired()
                        .HasConstraintName("FK_County_CompanyOfficial");

                    b.Navigation("CompanyType");

                    b.Navigation("MapCity");

                    b.Navigation("MapCountry");

                    b.Navigation("MapCounty");

                    b.Navigation("OfficialCity");

                    b.Navigation("OfficialCountry");

                    b.Navigation("OfficialCounty");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.CompanyImage", b =>
                {
                    b.HasOne("DFN2023.Entities.EF.Company", "Company")
                        .WithMany("CompanyImage")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_Company_CompanyImage");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.County", b =>
                {
                    b.HasOne("DFN2023.Entities.EF.City", "City")
                        .WithMany("County")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_City_County");

                    b.Navigation("City");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.Message", b =>
                {
                    b.HasOne("DFN2023.Entities.EF.Message", "ParentMessage")
                        .WithMany("ChildMessage")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Message_Message");

                    b.Navigation("ParentMessage");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.ProductCompany", b =>
                {
                    b.HasOne("DFN2023.Entities.EF.Category", "Category")
                        .WithMany("ProductCompany")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Category_ProductCompany");

                    b.HasOne("DFN2023.Entities.EF.Company", "Company")
                        .WithMany("ProductCompany")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_Company_ProductCompany");

                    b.HasOne("DFN2023.Entities.EF.ProductBase", "ProductBase")
                        .WithMany("ProductCompany")
                        .HasForeignKey("ProductBaseId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductBase_ProductCompany");

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("ProductBase");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.StaticContentGrupPage", b =>
                {
                    b.HasOne("DFN2023.Entities.EF.StaticContentGrupTemp", "StaticContentGrupTemp")
                        .WithMany("StaticContentGrupPage")
                        .HasForeignKey("GrupTempId")
                        .IsRequired()
                        .HasConstraintName("FK_StaticContentGrupTemp_StaticContentGrupPage");

                    b.Navigation("StaticContentGrupTemp");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.StaticContentPage", b =>
                {
                    b.HasOne("DFN2023.Entities.EF.StaticContentGrupPage", "StaticContentGrupPage")
                        .WithMany("StaticContentPage")
                        .HasForeignKey("GrupId")
                        .IsRequired()
                        .HasConstraintName("FK_StaticContentGrupPage_StaticContentPage");

                    b.HasOne("DFN2023.Entities.EF.StaticContentTemp", "StaticContentTemp")
                        .WithMany("StaticContentPage")
                        .HasForeignKey("TempId")
                        .IsRequired()
                        .HasConstraintName("FK_StaticContentTemp_StaticContentPage");

                    b.Navigation("StaticContentGrupPage");

                    b.Navigation("StaticContentTemp");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.UserUrunler", b =>
                {
                    b.HasOne("DFN2023.Entities.EF.Company", "Company")
                        .WithMany("UserUrunler")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_Company_UserUrunler");

                    b.HasOne("DFN2023.Entities.EF.User", "User")
                        .WithMany("UserUrunler")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_User_UserUrunler");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.Category", b =>
                {
                    b.Navigation("CategoryProductBase");

                    b.Navigation("ChildCategory");

                    b.Navigation("ProductCompany");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.City", b =>
                {
                    b.Navigation("County");

                    b.Navigation("MapCompany");

                    b.Navigation("OfficialCompany");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.Company", b =>
                {
                    b.Navigation("CompanyImage");

                    b.Navigation("ProductCompany");

                    b.Navigation("UserUrunler");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.CompanyType", b =>
                {
                    b.Navigation("Company");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.Country", b =>
                {
                    b.Navigation("City");

                    b.Navigation("MapCompany");

                    b.Navigation("OfficialCompany");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.County", b =>
                {
                    b.Navigation("MapCompany");

                    b.Navigation("OfficialCompany");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.Message", b =>
                {
                    b.Navigation("ChildMessage");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.ProductBase", b =>
                {
                    b.Navigation("CategoryProductBase");

                    b.Navigation("ProductCompany");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.StaticContentGrupPage", b =>
                {
                    b.Navigation("StaticContentPage");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.StaticContentGrupTemp", b =>
                {
                    b.Navigation("StaticContentGrupPage");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.StaticContentTemp", b =>
                {
                    b.Navigation("StaticContentPage");
                });

            modelBuilder.Entity("DFN2023.Entities.EF.User", b =>
                {
                    b.Navigation("UserUrunler");
                });
#pragma warning restore 612, 618
        }
    }
}
